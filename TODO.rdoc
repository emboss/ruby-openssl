== OpenSSL::ASN1::Template

=== asn1_sequence_of_choice, asn1_set_of_choice 

Either provide the DSL methods or allow to declare a template as a choice
via asn1_declare_choice. If the latter is implemented, the prior methods
could be provided by creating a temporary choice type that is attached to
the ordinary asn1_sequence_of and asn1_set_of. the *of_choice methods might
come in handy in situations where the namespace should not be polluted by 
being forced to create a template for an otherwise useless ASN.1 construct.

=== Infinite length

* convert infinite length primitives to a single primitive
* infinite length should only be a hint for encoding, primitive values 
  should always be converted to a single distinct value (instead of an array)
* Declaring the chunk sizes for infinite length values can be handled by having
  an Array of sizes for each chunk ( e.g. [4096, 4096, 217] ). 
* To simplify this funtionality for users, offer instance methods for Template
  
* set_infinite_length(name, chunk_size=nil) (do the math internally) and primitive values

* roadmap for having it on a per-instance basis: Primtives set it if encountered
  on the value when parsing, for encoding it's an instance variable of the 
  value. (Take care of the chunk sizes). 

=== Multi-threaded parsing

* Sequences and sets could be parsed using threads from a thread pool to boost performance

=== Set order

* Take care of SET and SET OF ordering

=== Tests 

* Infinite length for primitives

* Infinite length with explicit tagging

* Infinite length with implicit tagging

* Infinite length for asn1_any

=== String encoders

Introduce encoders that force a certain encoding that is specific to the string type?


